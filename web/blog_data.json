[
  {
    "url": "https://www.willsroot.io/2024/08/trojan-turtles.html",
    "summary": "The blog post details a complex KVM escape exploit demonstrated during the corCTF 2024 event. The challenge, named \"Trojan Turtles,\" required participants to escape from an L2 guest into the L1 hypervisor with root privileges. The exploit was inspired by Project Zero's SVM nested KVM escape and involved a backdoored KVM driver that allowed arbitrary out-of-bounds (OOB) read/write access to the hypervisor's kernel. The author provides a comprehensive walkthrough of the exploit development process, including the setup of the virtualized environment, the discovery and utilization of the backdoor, and the final steps to achieve a reverse shell from the L1 hypervisor. The exploit leverages debug registers, VMX root operation, and careful manipulation of the hypervisor's memory structures. Despite the challenge's complexity, only two teams managed to solve it during the competition. The author congratulates the solvers and recommends reading their writeups for alternative approaches to the same problem.\n\nHashtags: #corCTF2024, #KVMescape, #hypervisor, #exploitdevelopment, #virtualization, #kernelvulnerability, #reverseengineering, #CTFchallenge, #ProjectZero",
    "breakdown": ""
  },
  {
    "url": "https://labs.taszk.io/articles/post/there_will_be_bugs/",
    "summary": "The blog post from taszk.io labs details the discovery and exploitation of new security vulnerabilities in the Radio Layer 2 protocols of Samsung Exynos basebands. The authors, Daniel Komaromy, Lorant Szabo, and Laszlo Szapula, describe their research into the lower layers of Radio Access Technologies, such as 2G, and their findings of a chain of vulnerabilities that allowed for remote code execution (RCE) on Samsung Exynos smartphones. They discuss the heap overflow exploitation technique, heap shaping with LLC, and the development of a proof of concept. The post also covers the challenges of overcoming entropy and the implementation of a \"Baseband Space Mirroring Attack\" to execute arbitrary code without knowing the exact firmware version. The exploit was demonstrated over-the-air using a modified Osmocom codebase and a bladeRF software-defined radio.\n\nHashtags: #exploitdevelopment, #reverseengineering, #kernelvulnerability, #ProjectZero, #baseband, #RCE, #heapoverflow, #SamsungExynos, #GPRS, #LLCAMmode.",
    "breakdown": ""
  },
  {
    "url": "https://qriousec.github.io/post/vbox-pwn2own-2023/",
    "summary": "The blog post details the process of analyzing and exploiting two vulnerabilities in VirtualBox, CVE-2023-21987 and CVE-2023-21991, which were used in the Pwn2Own Vancouver 2023 competition. The author, Trung (xikhud), joined the Qrious Secure team and was tasked with reproducing the security bugs. The post covers the setup for building VirtualBox, learning its source code, and understanding its architecture, including the kernel mode (R0) and user mode (R3) components. The author explains the process of finding attack vectors, such as memory mapped I/O and port I/O, and provides insights into the exploitation of the TPM and VGA components, leading to an out-of-bounds (OOB) write and read bugs, respectively.\n\nThe exploitation section discusses the use of heap spraying with HGCMMsgCall objects and the challenges faced, such as heap layout changes and guard pages. The author also delves into Windows heap internals, LFH (Low Fragmentation Heap), and the use of heap chunk headers to improve the exploit's reliability and speed. The post concludes with acknowledgments and reflections on the learning experience.\n\nHashtags: #virtualization, #hypervisor, #exploitdevelopment, #kernelvulnerability, #reverseengineering, #heapoverflow, #RCE.",
    "breakdown": ""
  },
  {
    "url": "https://margin.re/2024/07/you-cant-spell-webrtc-without-rce-part-2/",
    "summary": "The blog post is the second part of a series on WebRTC, Signal-iOS, and iOS exploitation. It details the process of leveraging arbitrary read and write vulnerabilities in WebRTC to achieve remote code execution (RCE) on iOS devices, specifically targeting the Signal app's database. The post covers breaking Address Space Layout Randomization (ASLR), setting up Corellium for iOS emulation, and constructing ARM64 Return-Oriented Programming (ROP) chains. The author explains how to hijack execution flow, leak necessary addresses, and exfiltrate data from Signal's database. The post also discusses the limitations of the iOS simulator for exploit development and the advantages of using Corellium as an emulator. The final goal of the research is to demonstrate RCE against a known target, an iPhone 14 Pro running iOS 16.4.\n\nHashtags: #RCE, #WebRTC, #iOSExploitation, #SignalApp, #ASLR, #Corellium, #ARM64, #ROPchain, #exploitdevelopment, #emulation",
    "breakdown": ""
  },
  {
    "url": "https://blog.ret2.io/2024/07/17/pwn2own-auto-2024-charx-bugs/",
    "summary": "The blog post from RET2 Systems details their research on the Phoenix Contact CHARX SEC-3100 electric vehicle charger and the discovery of vulnerabilities within its system. The CHARX was targeted due to its industrial nature and the availability of its firmware for analysis. The device runs a custom embedded Linux on a 32-bit ARM processor and has several potential attack surfaces, including SSH with default credentials and two ethernet ports with different access rules.\n\nThe researchers focused on the Controller Agent service, which communicates over UDP, TCP, and HomePlug Green PHY protocol. They discovered two bugs: a null dereference vulnerability in the HomePlug packet parsing and a use-after-free (UAF) vulnerability triggered during process cleanup. The null dereference could be used to crash the service, while the UAF occurred due to improper destructor ordering in the C++ code, leading to a situation where the destructor of a global object tried to access already destructed members.\n\nThe blog post concludes by mentioning that a follow-up post will cover the exploitation process and provides a challenge on their WarGames platform to practice exploiting a similar bug pattern. CVE identifiers for the vulnerabilities are also listed.\n\nHashtags: #Pwn2Own, #electricvehicle, #securityresearch, #vulnerabilitydiscovery, #UAF, #nullreference, #Cplusplus, #embeddedLinux, #ARM, #reverseengineering, #exploitdevelopment, #CVE",
    "breakdown": ""
  }
]